"use strict";
module.exports = function (grunt) {
    // load all grunt task libraries
    require("load-grunt-tasks")(grunt);

    // clean up code and run tests
    grunt.registerTask("default", ["eslint", "test"]);
    grunt.registerTask("test", ["dropDatabase", "express:test", "mochaTest"]);
    
    // generate code coverage using bash istanbul wrapper
    grunt.registerTask('coverage', ['exec:coverage']);
    // push code coverage to coveralls.io
    grunt.registerTask('coverage:push', ['exec:coverage', 'coveralls']);

    // generate documentation locally
    grunt.registerTask("docs", ["exec:docs"]);
    // generate documentation and push it to github
    grunt.registerTask("docs:push", ["docs", "gh-pages"]);

    var mongoose = require("mongoose");
    grunt.registerTask("dropDatabase", function () {
        // force grunt into async
        var done = this.async();
        mongoose.connect("mongodb://localhost/orange-api", function (err) {
            if (err) return done(err);
            mongoose.connection.db.dropDatabase(function(err) {
                if (err) return done(err);
                console.log("Database dropped");
                mongoose.connection.close(done);
            });
        });
    });

    grunt.initConfig({
        // detect code smells
        eslint: {
            target: ["Gruntfile.js", "app.js", "lib/*.js", "lib/**/*.js", "test/*.js", "test/**/*.js"]
        },

        // beautify all javascript to conform with jsbeautifier's style guide
        /*
        jsbeautifier: {
            // TODO: test files here as well
            //files: ["Gruntfile.js", "app.js", "lib/*.js", "lib/**///*.js", "test/*.js", "test/**/*.js"],
            /*options: {
                config: ".jsbeautifyrc"
            }
        },
        */

        // run tests: make sure to close all express/db/sinon/etc connections or this
        // will hang
        mochaTest: {
            test: {
                options: {
                    reporter: "spec",
                    timeout: "10000"
                },
                src: ["test/common.js", "test/common/*.js", "test/**/*.js"]
            }
        },

        // run test server
        express: {
            test: {
                options: {
                    script: "run.js"
                }
            }
        },

        exec: {
            // build documentation locally: latest version of aglio doesn't play well with grunt-aglio
            // so we use a shell script instead
            docs: {
                cwd: "docs",
                cmd: "./build.sh"
            },
            // generate code coverage: bash wrapper around istanbul as their cli makes things a lot easier
            // than playing around with js hooks
            coverage: './cover.sh'
        },

        // coveralls.io code coverage service
        coveralls: {
            options: {
                force: false
            },
            src: ['./coverage/lcov.info']
        },

        // push generated documentation straight to gh pages (with fixed commit message, but that's not
        // the end of the world)
        "gh-pages": {
            options: {
                base: "docs/output",
                message: "Documentation updates (gh-pages commit message autogenerated by grunt)"
            },
            src: ["**"]
        }
    });
};
